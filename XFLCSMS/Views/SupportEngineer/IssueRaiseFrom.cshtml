@model XFLCSMS.Models.Issue.IssueViewModel;
@{
    Layout = "_SupportEngineerLayout";
}




<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Issue Raise Form</h1>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>



<section class="content">
    <form asp-controller="SupportEngineer" asp-action="IssueRaiseFrom" name="files" method="post" enctype="multipart/form-data" id="uploadForm">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <div class="card card-primary">
                        <div class="card-header">
                            <h3 class="card-title">General Information</h3>
                        </div>
                        <div class="card-body">
                            <div class="form-group">
                                <label for="exampleInputEmail1">User ID</label>
                                <input asp-for="@Model.issueFrom.UserId" value="@Model.LoginInfo.UserId" type="number" class="form-control" id="exampleInputEmail1" placeholder="User ID" readonly>

                            </div>
                            <div class="form-group">
                                <label for="exampleInputEmail1">Brokerage House Name</label>
                                <input asp-for="@Model.issueFrom.BrocarageHouseName" value="@Model.LoginInfo.BrocarageHouseName" type="text" class="form-control" id="exampleInputEmail1" placeholder="Brokerage House Name" readonly>

                            </div>
                            <div class="form-group">
                                <label for="exampleInputEmail1">Branch</label>
                                <input asp-for="@Model.issueFrom.BranchName" value="@Model.LoginInfo.BranchName" type="text" class="form-control" id="exampleInputEmail1" placeholder="Branch" readonly>
                            </div>

                            <div class="form-group">
                                <label for="exampleInputEmail1">Ticket ID</label>
                                <input asp-for="@Model.issueFrom.TicketId" value="@Model.LoginInfo.TicketID" type="text" class="form-control" id="exampleInputEmail1" placeholder="Ticket ID" readonly>
                            </div>

                            <div class="form-group">
                                <label for="exampleInputEmail1">Ticket Issue's Time and Date</label>
                                <input asp-for="@Model.issueFrom.dateTime" type="text" class="form-control" id="dateTimeInput" readonly>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card card-primary">
                        <div class="card-header">
                            <h3 class="card-title">Information Regarding Issue</h3>
                        </div>
                        <div class="card-body">
                            <div class="form-group">
                                <label for="Support Type">Support Type</label>
                                <select asp-for="@Model.issueFrom.SupportTypeId" class="form-control">
                                    <option>Choose Your Support Type</option>
                                    @foreach (var item in Model.SupportTypes)
                                    {
                                        <option value="@item.SupportTypeId">@item.SType</option>
                                    }

                                </select>
                            </div>

                            <div class="form-group">
                                <label for="exampleInputEmail1">Support Category</label>
                                <select asp-for="@Model.issueFrom.SupportCatagoryId" class="form-control">
                                    <option>Choose Your Support Category</option>
                                    @foreach (var item in Model.SupportCatagories)
                                    {
                                        <option value="@item.SupportCatagoryId">@item.SCatagory</option>
                                    }


                                </select>
                            </div>

                            <div class="form-group">
                                <label for="exampleInputEmail1">Support Sub-Category</label>
                                <select asp-for="@Model.issueFrom.SupportSubCatagoryID" class="form-control">
                                    <option>Choose Your Support Sub-Category</option>
                                    @foreach (var item in Model.SupportSubCatagories)
                                    {
                                        <option value="@item.SupportSubCatagoryId">@item.SubCatagory</option>
                                    }


                                </select>
                            </div>

                            <div class="form-group">
                                <label for="exampleInputEmail1">Affected Section</label>
                                <select asp-for="@Model.issueFrom.AffectedSectionId" class="form-control">
                                    <option>Choose Your Affected Section</option>
                                    @foreach (var item in Model.AffectedSections)
                                    {
                                        <option value="@item.AffectedSectionId">@item.ASection</option>
                                    }

                                </select>
                            </div>

                            <div class="form-group">
                                <label>Priority</label>
                                <select asp-for="@Model.issueFrom.Priority" id="prioritySelect" class="form-control">
                                    <option value="">Choose Your Issue Priority</option>
                                    <option value="Low">Low</option>
                                    <option value="Medium">Medium</option>
                                    <option value="High">High</option>
                                </select>
                                <div id="priorityError" class="error" style="display:none;">Please select a priority.</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="container-fluid">
                <div class="card-body">
                    <div class="form-group">
                        <label>Issue Title</label>
                        <input asp-for="@Model.issueFrom.ITitle" type="text" class="form-control" id="ITitle" placeholder="Please enter an Issue Title">
                        <div id="ITitleError" class="error" style="display:none;">Please enter an Issue Title.</div>
                    </div>
                    <div>
                        <label>Issue Details</label>
                        <textarea asp-for="@Model.issueFrom.IssueDetails" id="editor"></textarea>
                    </div>

                    <div class="form-group">
                        <label>Comments Regarding Issue</label>
                        <textarea asp-for="@Model.issueFrom.Commands" class="form-control" rows="3" placeholder="Enter Comments (If any)..."></textarea>
                    </div>
                    <div class="form-group">
                        <label>Upload Files (Multiple-If required)</label>
                        <div id="fileInputsContainer">
                            <button type="button" class="btn btn-outline-success mt-3" onclick="addFileInput()">Add Files(+)</button>
                        </div>
                    </div>
                    <div class="form-group">
                        <button id="submitButton" type="submit" class="btn btn-outline-primary " disabled>Submit</button>
                    </div>
                </div>
            </div>
        </div>


    </form>
</section>







@section Scripts {
    <script>
        $(function () {
            bsCustomFileInput.init();
        });
    </script>
    <script>
        $(document).ready(function () {
            function updateDateTime() {
                var currentDate = new Date();
                var options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric' };
                var formattedDate = currentDate.toLocaleDateString('en-US', options);

                $('#currentDateTime').text(formattedDate);
            }

            // Update the date and time every second
            setInterval(updateDateTime, 1000);

            // Initial update
            updateDateTime();
        });
    </script>



    <script>
        // Function to update the read-only input field with the current date and time
        function updateDateTime() {
            // Get the current date and time
            var currentDate = new Date();

            // Format the date and time as a string
            var formattedDateTime = currentDate.toLocaleString();

            // Update the value of the read-only input field
            document.getElementById('dateTimeInput').value = formattedDateTime;
        }

        // Call the function when the page loads
        updateDateTime();

        // You can also update the date and time at regular intervals if needed
        // setInterval(updateDateTime, 1000); // Update every 1000 milliseconds (1 second)
    </script>

    <script>
        function addFileInput() {
            var fileInputsContainer = document.getElementById("fileInputsContainer");
            var fileInputContainer = document.createElement("div");
            var newFileInput = document.createElement("input");
            var deleteButton = document.createElement("button");

            var uniqueId = "fileInput_" + new Date().getTime(); // Generate a unique ID

            newFileInput.type = "file";
            newFileInput.className = "form-control mt-3";
            newFileInput.name = "files"; // Remove '[]' to send files as a list
            newFileInput.id = uniqueId; // Set the unique ID
            newFileInput.addEventListener("change", function () {
                if (!validateFileType(this)) {
                    fileInputsContainer.removeChild(fileInputContainer);
                    alert('Invalid file type! Only TXT, DOC, PDF, JPG, and PNG files are allowed.');
                    return;
                }
                updateFileList();
            });

            deleteButton.type = "button";
            deleteButton.className = "btn btn-danger mt-2";
            deleteButton.textContent = "Delete";
            deleteButton.addEventListener("click", function () {
                fileInputsContainer.removeChild(fileInputContainer);
                updateFileList();
            });

            fileInputContainer.appendChild(newFileInput);
            fileInputContainer.appendChild(deleteButton);
            fileInputsContainer.appendChild(fileInputContainer);
            updateFileList();
        }

        function validateFileType(input) {
            var allowedExtensions = ['txt', 'doc', 'pdf', 'jpg', 'png'];
            var fileName = input.value.toLowerCase();
            var fileExtension = fileName.split('.').pop();
            return allowedExtensions.includes(fileExtension);
        }

        function updateFileList() {
            var fileInputs = document.querySelectorAll("input[type='file']");
            var fileListContainer = document.getElementById("fileList");

            if (!fileListContainer) {
                fileListContainer = document.createElement("div");
                fileListContainer.id = "fileList";
                document.getElementById("uploadForm").appendChild(fileListContainer);
            }

            fileListContainer.innerHTML = "";

            var fileListText = "<strong>Selected Files:</strong><ul>";

            fileInputs.forEach(function (fileInput) {
                for (var i = 0; i < fileInput.files.length; i++) {
                    fileListText += "<li>" + fileInput.files[i].name + "</li>";
                }
            });

            fileListText += "</ul>";
            fileListContainer.innerHTML = fileListText;
        }
    </script>






    <script>
        function validateForm() {
            var priority = document.getElementById("prioritySelect").value;
            var issueTitle = document.getElementById("ITitle").value.trim();

            var priorityError = document.getElementById("priorityError");
            var issueTitleError = document.getElementById("ITitleError");
            var submitButton = document.getElementById("submitButton");

            var priorityIsValid = priority !== "";
            var issueTitleIsValid = issueTitle !== "";

            if (!priorityIsValid) {
                priorityError.style.display = "block";
                priorityError.innerText = "Please select a priority";
                priorityError.classList.add("error");
            } else {
                priorityError.style.display = "none";
                priorityError.innerText = "";
                priorityError.classList.remove("error");
            }

            if (!issueTitleIsValid) {
                issueTitleError.style.display = "block";
                issueTitleError.innerText = "Please enter an issue title";
                issueTitleError.classList.add("error");
            } else {
                issueTitleError.style.display = "none";
                issueTitleError.innerText = "";
                issueTitleError.classList.remove("error");
            }

            submitButton.disabled = !(priorityIsValid && issueTitleIsValid);
        }

        document.getElementById("prioritySelect").addEventListener("change", validateForm);
        document.getElementById("ITitle").addEventListener("input", validateForm);
    </script>
}



